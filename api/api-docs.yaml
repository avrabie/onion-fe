{
  "openapi": "3.0.1",
  "info": {
    "title": "Demo Local AI API",
    "description": "API documentation for Demo Local AI application",
    "contact": {
      "name": "HelloWorlds",
      "url": "https://helloworlds.space",
      "email": "info@helloworlds.space"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "/",
      "description": "Default Server URL"
    }
  ],
  "paths": {
    "/users/{userId}/cart": {
      "get": {
        "tags": [
          "cart-handler"
        ],
        "summary": "Get user's cart",
        "description": "Returns the cart with items for a specific user",
        "operationId": "getCart",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "cart-handler"
        ],
        "summary": "Empty cart",
        "description": "Removes all items from the user's cart",
        "operationId": "emptyCart",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Cart emptied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/cart/checkout": {
      "post": {
        "tags": [
          "cart-handler"
        ],
        "summary": "Checkout cart",
        "description": "Creates an order with all items from the user's cart",
        "operationId": "checkout",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Order created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, cart is empty or items not available",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/cart/items": {
      "post": {
        "tags": [
          "cart-handler"
        ],
        "summary": "Add item to cart",
        "description": "Adds an item to the user's cart",
        "operationId": "addItemToCart",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCartItemRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Item added to cart",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "cart-handler"
        ],
        "summary": "Remove item from cart",
        "description": "Removes an item from the user's cart",
        "operationId": "removeItemFromCart",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveCartItemRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Item removed from cart",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartResponse"
                }
              }
            }
          }
        }
      }
    },
    "/greet": {
      "get": {
        "tags": [
          "hello-handler"
        ],
        "summary": "Greet anonymous user",
        "description": "Returns a greeting message for an anonymous user using AI",
        "operationId": "greet",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/greet/{name}": {
      "get": {
        "tags": [
          "hello-handler"
        ],
        "summary": "Greet with name",
        "description": "Returns a greeting message with the provided name using AI",
        "operationId": "greetWithName",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name to greet",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/hello": {
      "get": {
        "tags": [
          "hello-handler"
        ],
        "summary": "Say hello",
        "description": "Returns a simple hello world message",
        "operationId": "sayHello",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/hello/{name}": {
      "get": {
        "tags": [
          "hello-handler"
        ],
        "summary": "Say hello with name",
        "description": "Returns a hello message with the provided name",
        "operationId": "sayHelloWithName",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name to greet",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/orders": {
      "get": {
        "tags": [
          "order-handler"
        ],
        "summary": "Get all orders",
        "description": "Returns a list of all orders",
        "operationId": "getAllOrders",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "order-handler"
        ],
        "summary": "Create a new order",
        "description": "Creates a new order with the provided details",
        "operationId": "createOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Order created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orders/user/{userId}": {
      "get": {
        "tags": [
          "order-handler"
        ],
        "summary": "Get orders by user ID",
        "description": "Returns all orders for a specific user",
        "operationId": "getOrdersByUserId",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{id}": {
      "get": {
        "tags": [
          "order-handler"
        ],
        "summary": "Get order by ID",
        "description": "Returns a single order by its ID",
        "operationId": "getOrderById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Order ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "order-handler"
        ],
        "summary": "Update an existing order",
        "description": "Updates an order with the provided details",
        "operationId": "updateOrder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Order ID",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Order updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{orderId}/items": {
      "get": {
        "tags": [
          "order-handler"
        ],
        "summary": "Get order items by order ID",
        "description": "Returns all items for a specific order",
        "operationId": "getOrderItemsByOrderId",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Order ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderItem"
                }
              }
            }
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": [
          "product-handler"
        ],
        "summary": "Get all products",
        "description": "Returns a list of all products",
        "operationId": "getAllProducts",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "product-handler"
        ],
        "summary": "Create a new product",
        "description": "Creates a new product with the provided details",
        "operationId": "createProduct",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Product created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        }
      }
    },
    "/products/name/{slug}": {
      "get": {
        "tags": [
          "product-handler"
        ],
        "summary": "Get product by slug",
        "description": "Returns a single product by its slug",
        "operationId": "getProductBySlug",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "description": "Product slug",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Product not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/products/search": {
      "get": {
        "tags": [
          "product-handler"
        ],
        "summary": "Search products by name",
        "description": "Returns products matching the search query",
        "operationId": "searchProducts",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name pattern to search for"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        }
      }
    },
    "/products/{id}": {
      "get": {
        "tags": [
          "product-handler"
        ],
        "summary": "Get product by ID",
        "description": "Returns a single product by its ID",
        "operationId": "getProductById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Product ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Product not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "product-handler"
        ],
        "summary": "Update an existing product",
        "description": "Updates a product with the provided details",
        "operationId": "updateProduct",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Product ID",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Product updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Product not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "product-handler"
        ],
        "summary": "Delete a product",
        "description": "Deletes a product by its ID",
        "operationId": "deleteProduct",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Product ID",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Product deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerResponse"
                }
              }
            }
          },
          "404": {
            "description": "Product not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/payments/confirm": {
      "post": {
        "tags": [
          "stripe-payment-handler"
        ],
        "summary": "Confirm a payment",
        "description": "Confirms a payment was successful and updates the order status",
        "operationId": "confirmPayment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmPaymentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment confirmed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentConfirmationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/payments/create-checkout": {
      "post": {
        "tags": [
          "stripe-payment-handler"
        ],
        "summary": "Create a checkout session",
        "description": "Creates a Stripe checkout session for an order",
        "operationId": "createCheckoutSession",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCheckoutSessionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Checkout session created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutSessionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/payments/create-intent": {
      "post": {
        "tags": [
          "stripe-payment-handler"
        ],
        "summary": "Create a payment intent",
        "description": "Creates a payment intent for an order",
        "operationId": "createPaymentIntent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentIntentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment intent created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentIntentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/payments/webhook": {
      "post": {
        "tags": [
          "stripe-payment-handler"
        ],
        "summary": "Handle Stripe webhook events",
        "description": "Processes webhook notifications from Stripe for payment events",
        "operationId": "handleWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StripeWebhookRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Webhook processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "user-handler"
        ],
        "summary": "Get all users",
        "description": "Returns a list of all users",
        "operationId": "getAllUsers",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user-handler"
        ],
        "summary": "Create a new user",
        "description": "Creates a new user with the provided details",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/users/email": {
      "get": {
        "tags": [
          "user-handler"
        ],
        "summary": "Get user by email",
        "description": "Returns a single user by its email",
        "operationId": "getUserByEmail",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "Email address",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/search": {
      "get": {
        "tags": [
          "user-handler"
        ],
        "summary": "Search users by username",
        "description": "Returns users matching the search query",
        "operationId": "searchUsers",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "Username pattern to search for"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/users/username/{username}": {
      "get": {
        "tags": [
          "user-handler"
        ],
        "summary": "Get user by username",
        "description": "Returns a single user by its username",
        "operationId": "getUserByUsername",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "Username",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "user-handler"
        ],
        "summary": "Get user by ID",
        "description": "Returns a single user by its ID",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user-handler"
        ],
        "summary": "Update an existing user",
        "description": "Updates a user with the provided details",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user-handler"
        ],
        "summary": "Delete a user",
        "description": "Deletes a user by its ID",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CartItemResponse": {
        "required": [
          "id",
          "price",
          "productId",
          "quantity",
          "totalPrice"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "productId": {
            "type": "integer",
            "format": "int64"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "price": {
            "type": "number"
          },
          "totalPrice": {
            "type": "number"
          }
        }
      },
      "CartResponse": {
        "required": [
          "createdAt",
          "id",
          "items",
          "totalPrice",
          "updatedAt",
          "userId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartItemResponse"
            }
          },
          "totalPrice": {
            "type": "number"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Order": {
        "required": [
          "orderDate",
          "status",
          "totalAmount",
          "userId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          },
          "totalAmount": {
            "type": "number"
          },
          "orderDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "ServerResponse": {
        "type": "object"
      },
      "AddCartItemRequest": {
        "required": [
          "productId",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "productId": {
            "type": "integer",
            "format": "int64"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RemoveCartItemRequest": {
        "required": [
          "productId"
        ],
        "type": "object",
        "properties": {
          "productId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CreateOrderRequest": {
        "required": [
          "items"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItemRequest"
            }
          }
        }
      },
      "OrderItemRequest": {
        "required": [
          "productId",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "productId": {
            "type": "integer",
            "format": "int64"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "OrderItem": {
        "required": [
          "price",
          "productId",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "orderId": {
            "type": "integer",
            "format": "int64"
          },
          "productId": {
            "type": "integer",
            "format": "int64"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "price": {
            "type": "number"
          }
        }
      },
      "Product": {
        "required": [
          "createdAt",
          "name",
          "price",
          "quantity",
          "sku"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "sku": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ConfirmPaymentRequest": {
        "required": [
          "paymentIntentId"
        ],
        "type": "object",
        "properties": {
          "paymentIntentId": {
            "type": "string"
          }
        }
      },
      "PaymentConfirmationResponse": {
        "required": [
          "message",
          "orderId",
          "status",
          "success"
        ],
        "type": "object",
        "properties": {
          "orderId": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "CreateCheckoutSessionRequest": {
        "required": [
          "cancelUrl",
          "orderId",
          "successUrl"
        ],
        "type": "object",
        "properties": {
          "orderId": {
            "type": "integer",
            "format": "int64"
          },
          "successUrl": {
            "type": "string"
          },
          "cancelUrl": {
            "type": "string"
          }
        }
      },
      "CheckoutSessionResponse": {
        "required": [
          "checkoutUrl",
          "sessionId"
        ],
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string"
          },
          "checkoutUrl": {
            "type": "string"
          }
        }
      },
      "CreatePaymentIntentRequest": {
        "required": [
          "orderId"
        ],
        "type": "object",
        "properties": {
          "orderId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "PaymentIntentResponse": {
        "required": [
          "amount",
          "clientSecret",
          "currency",
          "paymentIntentId"
        ],
        "type": "object",
        "properties": {
          "clientSecret": {
            "type": "string"
          },
          "paymentIntentId": {
            "type": "string"
          },
          "amount": {
            "type": "integer",
            "format": "int64"
          },
          "currency": {
            "type": "string"
          }
        }
      },
      "StripeEventData": {
        "required": [
          "object"
        ],
        "type": "object",
        "properties": {
          "object": {
            "$ref": "#/components/schemas/StripeObject"
          }
        }
      },
      "StripeObject": {
        "required": [
          "id",
          "object"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "StripeWebhookRequest": {
        "required": [
          "data",
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/StripeEventData"
          }
        }
      },
      "WebhookResponse": {
        "required": [
          "eventId",
          "received"
        ],
        "type": "object",
        "properties": {
          "received": {
            "type": "boolean"
          },
          "eventId": {
            "type": "string"
          }
        }
      },
      "User": {
        "required": [
          "createdAt",
          "email",
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    }
  }
}